import java.io.*;
import java.util.Random;
import java.util.Scanner;

public class Sudoku {
    private int[][] matriz;
    private Random random;

    // Constructor para inicializar el tablero vacío
    public Sudoku() {
        matriz = new int[9][9];
        random = new Random();
    }

    // Método para mostrar el tablero de Sudoku
    public void mostrarTablero() {
        System.out.println("Tablero de Sudoku:");
        for (int i = 0; i < 9; i++) {
            if (i % 3 == 0 && i != 0) {
                System.out.println("---------------------");
            }
            for (int j = 0; j < 9; j++) {
                if (j % 3 == 0 && j != 0) {
                    System.out.print("| ");
                }
                if (matriz[i][j] == 0) {
                    System.out.print(". ");
                } else {
                    System.out.print(matriz[i][j] + " ");
                }
            }
            System.out.println();
        }
    }

    // Método para ingresar un número en una posición específica
    public boolean ingresarNumero(int fila, int columna, int numero) {
        if (esPosicionValida(fila, columna) && esNumeroValido(numero)) {
            if (matriz[fila][columna] != 0) {
                System.out.println("La celda en la posición (" + fila + "," + columna + ") ya está llena con el número " + matriz[fila][columna] + ".");
                System.out.print("¿Desea modificar el número? (sí/no): ");
                Scanner scanner = new Scanner(System.in);
                String respuesta = scanner.next();

                if (!respuesta.equalsIgnoreCase("sí")) {
                    return false;
                }
            }

            if (esValido(fila, columna, numero)) {
                matriz[fila][columna] = numero;
                
                // Verificar si se ha llenado un subcuadro de 3x3
                if (esSubcuadroLleno(fila, columna)) {
                    System.out.println("¡Uno de los subcuadros de 3x3 está completamente lleno!");
                }
                
                registrarMovimiento(fila, columna, numero);
                return true;
            } else {
                System.out.println("Número no válido en la posición (" + fila + "," + columna + "). Verifique las reglas del Sudoku.");
                return false;
            }
        } else {
            System.out.println("Número o posición inválida. Asegúrese de que el número esté entre 1 y 9 y las posiciones entre 0 y 8.");
            return false;
        }
    }

    // Validar si la posición es válida
    private boolean esPosicionValida(int fila, int columna) {
        return fila >= 0 && fila < 9 && columna >= 0 && columna < 9;
    }

    // Validar si el número es válido
    private boolean esNumeroValido(int numero) {
        return numero >= 1 && numero <= 9;
    }

    // Método para validar que el número no se repita en la fila, columna o subcuadro 3x3
    private boolean esValido(int fila, int columna, int numero) {
        return !esNumeroEnFila(fila, numero) &&
               !esNumeroEnColumna(columna, numero) &&
               !esNumeroEnSubcuadro(fila, columna, numero);
    }

    private boolean esNumeroEnFila(int fila, int numero) {
        for (int j = 0; j < 9; j++) {
            if (matriz[fila][j] == numero) {
                return true;
            }
        }
        return false;
    }

    private boolean esNumeroEnColumna(int columna, int numero) {
        for (int i = 0; i < 9; i++) {
            if (matriz[i][columna] == numero) {
                return true;
            }
        }
        return false;
    }

    private boolean esNumeroEnSubcuadro(int fila, int columna, int numero) {
        int inicioFila = (fila / 3) * 3;
        int inicioColumna = (columna / 3) * 3;
        for (int i = inicioFila; i < inicioFila + 3; i++) {
            for (int j = inicioColumna; j < inicioColumna + 3; j++) {
                if (matriz[i][j] == numero) {
                    return true;
                }
            }
        }
        return false;
    }

    // Método para verificar si un subcuadro 3x3 está completamente lleno
    private boolean esSubcuadroLleno(int fila, int columna) {
        int inicioFila = (fila / 3) * 3;
        int inicioColumna = (columna / 3) * 3;
        for (int i = inicioFila; i < inicioFila + 3; i++) {
            for (int j = inicioColumna; j < inicioColumna + 3; j++) {
                if (matriz[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    // Método para llenar el tablero con una cantidad aleatoria de números válidos
    public void llenarTableroConNumerosAleatorios(int cantidad) {
        int numerosColocados = 0;

        while (numerosColocados < cantidad) {
            int fila = random.nextInt(9);
            int columna = random.nextInt(9);
            int numero = random.nextInt(9) + 1;

            if (matriz[fila][columna] == 0 && esValido(fila, columna, numero)) {
                matriz[fila][columna] = numero;
                numerosColocados++;
            }
        }
    }

    // Método para registrar cada movimiento en un archivo
    private void registrarMovimiento(int fila, int columna, int numero) {
        try (FileWriter fw = new FileWriter("partida.txt", true); 
             BufferedWriter bw = new BufferedWriter(fw)) {
            bw.write("Número " + numero + " colocado en la posición (" + fila + ", " + columna + ")");
            bw.newLine();
        } catch (IOException e) {
            System.out.println("Error al guardar el movimiento: " + e.getMessage());
        }
    }

    // Método para guardar el estado completo del tablero en un archivo
    private void guardarTablero() {
        try (FileWriter fw = new FileWriter("partida.txt"); 
             BufferedWriter bw = new BufferedWriter(fw)) {
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    bw.write(matriz[i][j] + " ");
                }
                bw.newLine();
            }
            bw.write("Tablero guardado.");
            bw.newLine();
        } catch (IOException e) {
            System.out.println("Error al guardar el tablero: " + e.getMessage());
        }
    }

    // Método para cargar el estado del tablero desde un archivo
    public void cargarTablero() {
        try (BufferedReader br = new BufferedReader(new FileReader("partida.txt"))) {
            String linea;
            int fila = 0;
            while ((linea = br.readLine()) != null && fila < 9) {
                String[] valores = linea.split(" ");
                for (int columna = 0; columna < 9; columna++) {
                    matriz[fila][columna] = Integer.parseInt(valores[columna]);
                }
                fila++;
            }
            System.out.println("Tablero cargado.");
        } catch (IOException e) {
            System.out.println("Error al cargar el tablero: " + e.getMessage());
        }
    }

    // Método para reproducir la última partida guardada paso a paso
    public void reproducirPartida() {
        try (BufferedReader br = new BufferedReader(new FileReader("partida.txt"))) {
            String linea;
            while ((linea = br.readLine()) != null) {
                if (linea.startsWith("Número")) {
                    String[] partes = linea.split(" ");
                    int numero = Integer.parseInt(partes[1]);
                    int fila = Integer.parseInt(partes[6].replace("(", ""));
                    int columna = Integer.parseInt(partes[8].replace(")", ""));
                    System.out.println("Colocando número " + numero + " en la posición (" + fila + ", " + columna + ")");
                    matriz[fila][columna] = numero;
                    mostrarTablero();
                    Thread.sleep(1000); // Espera 1 segundo entre movimientos
                }
            }
            System.out.println("Reproducción de la partida completa.");
        } catch (IOException e) {
            System.out.println("Error al reproducir la partida: " + e.getMessage());
        } catch (InterruptedException e) {
            System.out.println("Error durante la reproducción: " + e.getMessage());
        }
    }

    // Método principal para jugar al Sudoku
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Sudoku sudoku = new Sudoku();

        System.out.println("Elija una opción:");
        System.out.println("1. Iniciar con un tablero vacío");
        System.out.println("2. Iniciar con números aleatorios");
        System.out.println("3. Cargar una partida guardada");
        System.out.println("4. Reproducir la última partida guardada");

        int opcion = scanner.nextInt();

        if (opcion == 2) {
            System.out.print("¿Cuántos números aleatorios desea generar? (entre 9 y 21): ");
            int cantidad = scanner.nextInt();
            // Asegúrate de que la cantidad esté dentro del rango permitido
            cantidad = Math.max(9, Math.min(cantidad, 21));
            sudoku.llenarTableroConNumerosAleatorios(cantidad);
        } else if (opcion == 3) {
            sudoku.cargarTablero();
        } else if (opcion == 4) {
            sudoku.reproducirPartida();
            scanner.close();
            return;
        }

        boolean jugar = true;

        while (jugar) {
            sudoku.mostrarTablero();

            System.out.print("Ingrese la fila (0-8): ");
            int fila = scanner.nextInt();

            System.out.print("Ingrese la columna (0-8): ");
            int columna = scanner.nextInt();

            System.out.print("Ingrese el número (1-9): ");
            int numero = scanner.nextInt();

            boolean ingresoExitoso = sudoku.ingresarNumero(fila, columna, numero);
            if (!ingresoExitoso) {
                System.out.println("Intento fallido. Intente de nuevo.");
            }

            System.out.print("¿Desea continuar? (sí/no): ");
            String respuesta = scanner.next();
            if (respuesta.equalsIgnoreCase("no")) {
                jugar = false;
            }
        }

        // Guardar el estado final del tablero al finalizar la partida
        sudoku.guardarTablero();
        scanner.close();
        System.out.println("¡Gracias por jugar al Sudoku!");
    }
}
